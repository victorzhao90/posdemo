 1️⃣ web-socket.service.ts
typescript
Copy
Edit
import { Injectable } from '@angular/core';
import { Client } from '@stomp/stompjs';
import * as SockJS from 'sockjs-client';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class WebSocketService {
  private stompClient: Client | null = null;
  private messageSubject = new BehaviorSubject<string | null>(null);
  message$ = this.messageSubject.asObservable();

  constructor() {}

  /** 🔹 连接 WebSocket */
  connect() {
    const socket = new SockJS('http://localhost:8080/ws'); // 连接后端 WebSocket
    this.stompClient = new Client({
      webSocketFactory: () => socket,
      reconnectDelay: 5000 // 5秒自动重连
    });

    this.stompClient.onConnect = () => {
      console.log('✅ WebSocket 已连接');
      this.stompClient?.subscribe('/topic/questions', message => {
        this.messageSubject.next(message.body);
      });
    };

    this.stompClient.activate();
  }

  /** 🔹 断开 WebSocket */
  disconnect() {
    if (this.stompClient) {
      this.stompClient.deactivate();
      this.stompClient = null;
    }
  }

  /** 🔹 发送用户的 Yes/No 选择 */
  sendResponse(answer: boolean) {
    if (this.stompClient && this.stompClient.connected) {
      this.stompClient.publish({
        destination: '/app/response',
        body: JSON.stringify({ answer })
      });
    }
  }
}
✅ 2️⃣ app.component.ts
typescript
Copy
Edit
import { Component, OnInit, OnDestroy } from '@angular/core';
import { WebSocketService } from './web-socket.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit, OnDestroy {
  question: string | null = null;
  private subscription!: Subscription;

  constructor(private webSocketService: WebSocketService) {}

  ngOnInit() {
    this.subscription = this.webSocketService.message$.subscribe(msg => {
      this.question = msg;
    });
  }

  ngOnDestroy() {
    this.subscription.unsubscribe();
  }

  connect() {
    this.webSocketService.connect();
  }

  disconnect() {
    this.webSocketService.disconnect();
  }

  sendResponse(answer: boolean) {
    this.webSocketService.sendResponse(answer);
  }
}
✅ 3️⃣ app.component.html
html
Copy
Edit
<div class="container">
  <h1>POS 机模拟器</h1>

  <div *ngIf="question">
    <h2>{{ question }}</h2>
  </div>

  <button (click)="sendResponse(true)">Yes</button>
  <button (click)="sendResponse(false)">No</button>

  <hr>

  <button (click)="connect()">连接服务器</button>
  <button (click)="disconnect()">断开连接</button>
</div>

2️⃣ Implement pos.component.ts (Logic)
Modify the generated pos.component.ts to handle WebSocket communication and PIN input:

typescript
Copy
Edit
import { Component, OnInit } from '@angular/core';
import { Client } from '@stomp/stompjs';
import * as SockJS from 'sockjs-client';

@Component({
  selector: 'app-pos',
  templateUrl: './pos.component.html',
  styleUrls: ['./pos.component.css']
})
export class PosComponent implements OnInit {
  private stompClient!: Client;
  status: string = '连接中...';
  enteredPin: string = '';

  ngOnInit(): void {
    this.connectWebSocket();
  }

  connectWebSocket(): void {
    const socket = new SockJS('http://localhost:8080/ws');
    this.stompClient = new Client({
      webSocketFactory: () => socket,
      debug: (str) => console.log(str),
      reconnectDelay: 5000
    });

    this.stompClient.onConnect = () => {
      this.status = '✅ 已连接';
      console.log('Connected to WebSocket');
    };

    this.stompClient.activate();
  }

  enterDigit(digit: string): void {
    if (this.enteredPin.length < 4) {
      this.enteredPin += digit;
    }
  }

  clearPin(): void {
    this.enteredPin = '';
  }

  submitPin(): void {
    if (this.enteredPin.length === 4) {
      this.stompClient.publish({
        destination: '/app/pos/pin',
        body: JSON.stringify({ pin: this.enteredPin })
      });
      alert(`PIN 已提交: ${this.enteredPin}`);
      this.clearPin();
    } else {
      alert('请输入完整的 4 位 PIN');
    }
  }

  get maskedPin(): string {
    return this.enteredPin.replace(/./g, '*').padEnd(4, '_');
  }
}
3️⃣ Implement pos.component.html (UI)
Replace the generated pos.component.html with:

html
Copy
Edit
<div class="pos-container">
  <h2>POS 机 - PIN Pad</h2>
  <p>{{ status }}</p>
  <div id="display">{{ maskedPin }}</div>

  <!-- PIN Pad Buttons -->
  <div class="button-container">
    <button *ngFor="let digit of ['1','2','3','4','5','6','7','8','9','*','0','#']"
            (click)="enterDigit(digit)">
      {{ digit }}
    </button>
  </div>

  <button (click)="clearPin()">清除</button>
  <button (click)="submitPin()">提交</button>
</div>
4️⃣ Implement pos.component.css (Styling)
Replace pos.component.css with:

css
Copy
Edit
.pos-container { text-align: center; font-family: Arial, sans-serif; }
#display { font-size: 24px; margin: 20px; padding: 10px; border: 2px solid black; width: 200px; text-align: center; }
.button-container { display: grid; grid-template-columns: repeat(3, 60px); gap: 10px; justify-content: center; }
button { width: 60px; height: 60px; font-size: 20px; cursor: pointer; }
5️⃣ Use in app.component.html
After implementing the component, include it in app.component.html:

html
Copy
Edit
<app-pos></app-pos>
🚀 Key Features in Angular Version
✅ WebSocket support with Stomp.js (Replaces raw SockJS calls).
✅ Component-based architecture (Reusable).
✅ Angular event binding ((click)="...").
✅ Dynamic button generation (*ngFor).
✅ Two-way data binding with TypeScript logic.
